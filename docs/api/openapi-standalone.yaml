openapi: 3.0.3

info:
  title: E-Commerce API
  version: 1.0.0
  description: |
    이커머스 백엔드 시스템 REST API

    ## 개요
    이 API는 의류 판매 이커머스의 핵심 기능을 제공합니다.

    ## 주요 기능
    - **상품 관리**: 상품 조회, 재고 확인, 인기 상품 통계
    - **주문/결제**: 장바구니, 주문 생성, 포인트 결제, 쿠폰 적용
    - **포인트 시스템**: 충전, 사용, 잔액 조회
    - **쿠폰 시스템**: 선착순 발급, 유효성 검증

    ## 기술 스택
    - 언어: TypeScript
    - 프레임워크: NestJS
    - 데이터베이스: MySQL 8.0

    ## 관련 문서
    - [요구사항 문서](../requirements/)
    - [시퀀스 다이어그램](../sequence-diagram/)
    - [ERD](../ERD/)
  contact:
    name: API Support
  license:
    name: MIT

servers:
  - url: http://localhost:3000
    description: 로컬 개발 서버
  - url: http://localhost:4010
    description: Mock API Server (Prism)

tags:
  - name: Product
    description: 상품 관리 API
  - name: Order
    description: 주문 관리 API
  - name: Payment
    description: 포인트 관리 API
  - name: Coupon
    description: 쿠폰 관리 API
  - name: Cart
    description: 장바구니 API
  - name: User
    description: 사용자 관리 API

paths:
  # Product APIs
  /products:
    get:
      tags:
        - Product
      summary: 상품 목록 조회
      description: |
        상품 목록을 조회합니다.

        **기능 요구사항**: FR-P-001
        **관련 문서**: docs/requirements/product.md

        **비즈니스 규칙**:
        - 삭제된 상품 제외
        - 비활성화된 상품 제외
        - 정렬 옵션: newest(최신순), popular(인기순), price_low(낮은가격순), price_high(높은가격순)
      operationId: getProducts
      parameters:
        - name: categoryId
          in: query
          description: 카테고리 ID
          required: false
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: 페이지 번호
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 페이지 크기
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sortBy
          in: query
          description: 정렬 기준
          required: false
          schema:
            type: string
            enum: [newest, popular, price_low, price_high]
            default: newest
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "CATEGORY_NOT_FOUND"
                message: "카테고리를 찾을 수 없습니다"
        '500':
          description: 서버 오류

  /products/{productId}:
    get:
      tags:
        - Product
      summary: 상품 상세 조회
      description: |
        특정 상품의 상세 정보를 조회합니다.

        **기능 요구사항**: FR-P-002
        **관련 문서**: docs/requirements/product.md

        **비즈니스 규칙**:
        - 조회 시 조회수 1 증가
        - 삭제된 상품은 조회 불가
        - 판매 불가능한 옵션도 표시 (구매는 불가)
      operationId: getProduct
      parameters:
        - name: productId
          in: path
          description: 상품 ID
          required: true
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDetailResponse'
        '404':
          description: 상품을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                productNotFound:
                  summary: 상품 없음
                  value:
                    code: "PRODUCT_NOT_FOUND"
                    message: "상품을 찾을 수 없습니다"
                productDeleted:
                  summary: 삭제된 상품
                  value:
                    code: "PRODUCT_DELETED"
                    message: "삭제된 상품입니다"
        '500':
          description: 서버 오류

  /products/{productId}/options:
    get:
      tags:
        - Product
      summary: 상품 옵션 목록 조회
      description: |
        특정 상품의 옵션 목록을 조회합니다.

        **기능 요구사항**: FR-P-003
        **관련 문서**: docs/requirements/product.md

        **비즈니스 규칙**:
        - 모든 옵션 조회 (판매 가능/불가능 모두)
      operationId: getProductOptions
      parameters:
        - name: productId
          in: path
          description: 상품 ID
          required: true
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                required:
                  - productId
                  - productName
                  - options
                properties:
                  productId:
                    type: integer
                    example: 10
                  productName:
                    type: string
                    example: "기본 라운드 티셔츠"
                  options:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProductOption'
        '404':
          description: 상품을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "PRODUCT_NOT_FOUND"
                message: "상품을 찾을 수 없습니다"
        '500':
          description: 서버 오류

  /products/popular:
    get:
      tags:
        - Product
      summary: 인기 상품 조회 (Top 5)
      description: |
        최근 3일간 판매량 기준 상위 5개 상품을 조회합니다.

        **기능 요구사항**: FR-P-008
        **관련 문서**: docs/requirements/product.md

        **비즈니스 규칙**:
        - 최근 3일간 완료된 주문의 order_items 집계
        - 판매 수량 기준 내림차순 정렬
        - 상위 5개 반환
      operationId: getPopularProducts
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PopularProductsResponse'
        '500':
          description: 서버 오류

  # Order APIs
  /orders:
    post:
      tags:
        - Order
      summary: 주문 생성
      description: |
        장바구니 상품을 주문하고 포인트로 결제합니다.

        **기능 요구사항**: FR-O-001
        **관련 문서**: docs/requirements/order.md

        **비즈니스 규칙**:
        - 장바구니 아이템을 기반으로 주문 생성
        - 재고 가용성 사전 확인
        - 쿠폰은 주문당 1개만 적용 가능
        - 주문 생성 → 포인트 차감 → 재고 차감 순서로 처리
        - 하나라도 실패하면 전체 롤백
        - 주문 완료 후 외부 데이터 플랫폼으로 비동기 전송 (실패해도 주문 완료)

        **프로세스**:
        1. 장바구니 검증
        2. 재고 가용성 확인
        3. 쿠폰 검증 (선택)
        4. 주문 생성 (PENDING)
        5. 포인트 차감
        6. 재고 차감
        7. 쿠폰 사용 처리
        8. 주문 상태 변경 (PAID)
        9. 장바구니 비우기
        10. 외부 데이터 전송 (비동기)
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
            examples:
              withCoupon:
                summary: 쿠폰 사용
                value:
                  cartItemIds: [1, 2, 3]
                  shippingAddress:
                    recipientName: "홍길동"
                    phoneNumber: "010-1234-5678"
                    postalCode: "12345"
                    address: "서울특별시 강남구 테헤란로 123"
                    detailAddress: "4층 401호"
                  couponId: 5
              withoutCoupon:
                summary: 쿠폰 미사용
                value:
                  cartItemIds: [1, 2]
                  shippingAddress:
                    recipientName: "홍길동"
                    phoneNumber: "010-1234-5678"
                    postalCode: "12345"
                    address: "서울특별시 강남구 테헤란로 123"
                    detailAddress: "4층 401호"
      responses:
        '201':
          description: 주문 생성 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                cartItemsNotFound:
                  summary: 장바구니 아이템 없음
                  value:
                    code: "CART_ITEMS_NOT_FOUND"
                    message: "장바구니 아이템을 찾을 수 없습니다"
                insufficientInventory:
                  summary: 재고 부족
                  value:
                    code: "INSUFFICIENT_INVENTORY"
                    message: "재고가 부족합니다"
                    details:
                      productId: 10
                      optionId: 101
                      requestedQuantity: 5
                      availableQuantity: 2
                invalidCoupon:
                  summary: 유효하지 않은 쿠폰
                  value:
                    code: "INVALID_COUPON"
                    message: "사용할 수 없는 쿠폰입니다"
                insufficientPoints:
                  summary: 포인트 부족
                  value:
                    code: "INSUFFICIENT_POINTS"
                    message: "포인트 잔액이 부족합니다"
                    details:
                      currentBalance: 50000
                      requiredAmount: 84000
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

    get:
      tags:
        - Order
      summary: 주문 목록 조회
      description: |
        사용자의 주문 목록을 조회합니다.

        **기능 요구사항**: FR-O-002
        **관련 문서**: docs/requirements/order.md

        **비즈니스 규칙**:
        - 최신 주문부터 내림차순 정렬
        - 기본 페이지 크기: 20개
      operationId: getOrders
      parameters:
        - name: status
          in: query
          description: 주문 상태 필터
          required: false
          schema:
            $ref: '#/components/schemas/OrderStatus'
        - name: page
          in: query
          description: 페이지 번호
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 페이지 크기
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

  /orders/{orderId}:
    get:
      tags:
        - Order
      summary: 주문 상세 조회
      description: |
        특정 주문의 상세 정보를 조회합니다.

        **기능 요구사항**: FR-O-003
        **관련 문서**: docs/requirements/order.md
      operationId: getOrder
      parameters:
        - name: orderId
          in: path
          description: 주문 ID
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: 주문을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "ORDER_NOT_FOUND"
                message: "주문을 찾을 수 없습니다"
        '401':
          description: 인증 실패
        '403':
          description: 다른 사용자의 주문
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "FORBIDDEN"
                message: "다른 사용자의 주문입니다"
        '500':
          description: 서버 오류

  /orders/{orderId}/items:
    get:
      tags:
        - Order
      summary: 주문 항목 조회
      description: |
        특정 주문의 항목 목록을 조회합니다.

        **기능 요구사항**: FR-O-004
        **관련 문서**: docs/requirements/order.md
      operationId: getOrderItems
      parameters:
        - name: orderId
          in: path
          description: 주문 ID
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                type: object
                required:
                  - orderId
                  - items
                properties:
                  orderId:
                    type: integer
                    example: 1
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderItem'
        '404':
          description: 주문을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "ORDER_NOT_FOUND"
                message: "주문을 찾을 수 없습니다"
        '401':
          description: 인증 실패
        '403':
          description: 다른 사용자의 주문
        '500':
          description: 서버 오류

  # Payment APIs
  /payments/charge:
    post:
      tags:
        - Payment
      summary: 포인트 충전
      description: |
        포인트를 충전합니다.

        **기능 요구사항**: FR-PAY-001
        **관련 문서**: docs/requirements/payment.md

        **비즈니스 규칙**:
        - 충전 금액: 1,000원 ~ 1,000,000원
        - 단위: 1,000원 단위만 가능
        - 최대 보유 잔액: 10,000,000원
        - 현재 잔액 + 충전 금액이 최대 잔액을 초과할 수 없음

        **검증 순서**:
        1. 금액 범위 검증 (1,000 ~ 1,000,000원)
        2. 금액 단위 검증 (1,000원 단위)
        3. 최대 잔액 확인 (락 획득 후 현재 잔액 기준)
      operationId: chargePoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChargePointRequest'
            examples:
              validCharge:
                summary: 정상 충전
                value:
                  amount: 50000
              minCharge:
                summary: 최소 금액
                value:
                  amount: 1000
              maxCharge:
                summary: 최대 금액
                value:
                  amount: 1000000
      responses:
        '200':
          description: 충전 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePointResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                invalidChargeAmount:
                  summary: 유효하지 않은 금액
                  value:
                    code: "INVALID_CHARGE_AMOUNT"
                    message: "충전 금액은 1,000원 이상 1,000,000원 이하여야 합니다"
                invalidChargeUnit:
                  summary: 유효하지 않은 단위
                  value:
                    code: "INVALID_CHARGE_UNIT"
                    message: "충전 금액은 1,000원 단위로만 가능합니다"
                maxBalanceExceeded:
                  summary: 최대 잔액 초과
                  value:
                    code: "MAX_BALANCE_EXCEEDED"
                    message: "최대 보유 가능 잔액(10,000,000원)을 초과합니다"
                    details:
                      currentBalance: 9800000
                      chargeAmount: 500000
                      maxBalance: 10000000
                      chargeableAmount: 200000
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

  /payments/balance:
    get:
      tags:
        - Payment
      summary: 포인트 잔액 조회
      description: |
        현재 포인트 잔액을 조회합니다.

        **기능 요구사항**: FR-PAY-002
        **관련 문서**: docs/requirements/payment.md
      operationId: getPointBalance
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointBalanceResponse'
        '401':
          description: 인증 실패
        '404':
          description: 사용자 포인트 계정이 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "USER_POINT_NOT_FOUND"
                message: "포인트 계정을 찾을 수 없습니다"
        '500':
          description: 서버 오류

  /payments/transactions:
    get:
      tags:
        - Payment
      summary: 포인트 사용 내역 조회
      description: |
        포인트 충전/사용/환불 내역을 조회합니다.

        **기능 요구사항**: FR-PAY-003
        **관련 문서**: docs/requirements/payment.md

        **비즈니스 규칙**:
        - 최신 거래부터 내림차순 정렬
        - 타입별 필터링 가능 (CHARGE, USE, REFUND)
      operationId: getPointTransactions
      parameters:
        - name: type
          in: query
          description: 트랜잭션 타입 필터
          required: false
          schema:
            $ref: '#/components/schemas/PointTransactionType'
        - name: page
          in: query
          description: 페이지 번호
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 페이지 크기
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointTransactionListResponse'
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

  # Coupon APIs
  /coupons/issue:
    post:
      tags:
        - Coupon
      summary: 쿠폰 발급
      description: |
        선착순 제한 수량 쿠폰을 발급받습니다.

        **기능 요구사항**: FR-CP-001
        **관련 문서**: docs/requirements/coupon.md

        **비즈니스 규칙**:
        - 1인 1쿠폰 (동일 타입)
        - 선착순 발급 (제한 수량)
        - 이미 발급받은 쿠폰은 재발급 불가
        - 수량 소진 시 발급 불가

        **처리 순서**:
        1. 쿠폰 타입 존재 여부 확인
        2. 중복 발급 확인
        3. 잔여 수량 확인 (락 획득)
        4. 발급 수량 증가
        5. 사용자 쿠폰 생성
      operationId: issueCoupon
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCouponRequest'
            example:
              couponTypeId: 1
      responses:
        '201':
          description: 발급 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueCouponResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                couponAlreadyIssued:
                  summary: 이미 발급받은 쿠폰
                  value:
                    code: "COUPON_ALREADY_ISSUED"
                    message: "이미 발급받은 쿠폰입니다"
                couponSoldOut:
                  summary: 쿠폰 소진
                  value:
                    code: "COUPON_SOLD_OUT"
                    message: "쿠폰이 모두 소진되었습니다"
        '404':
          description: 쿠폰 타입을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "COUPON_TYPE_NOT_FOUND"
                message: "쿠폰을 찾을 수 없습니다"
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

  /coupons/my:
    get:
      tags:
        - Coupon
      summary: 내 쿠폰 목록 조회
      description: |
        사용자가 보유한 쿠폰 목록을 조회합니다.

        **기능 요구사항**: FR-CP-002
        **관련 문서**: docs/requirements/coupon.md

        **비즈니스 규칙**:
        - 만료되지 않은 쿠폰과 만료된 쿠폰 모두 조회
        - 상태별 필터링 가능 (AVAILABLE, USED)
      operationId: getMyCoupons
      parameters:
        - name: status
          in: query
          description: 쿠폰 상태 필터
          required: false
          schema:
            $ref: '#/components/schemas/CouponStatus'
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCouponListResponse'
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

  /coupons/{couponId}:
    get:
      tags:
        - Coupon
      summary: 쿠폰 상세 조회
      description: |
        특정 쿠폰의 상세 정보를 조회합니다.

        **기능 요구사항**: FR-CP-003
        **관련 문서**: docs/requirements/coupon.md
      operationId: getCoupon
      parameters:
        - name: couponId
          in: path
          description: 사용자 쿠폰 ID
          required: true
          schema:
            type: integer
            example: 101
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCoupon'
        '404':
          description: 쿠폰을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "COUPON_NOT_FOUND"
                message: "쿠폰을 찾을 수 없습니다"
        '401':
          description: 인증 실패
        '403':
          description: 다른 사용자의 쿠폰
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "FORBIDDEN"
                message: "다른 사용자의 쿠폰입니다"
        '500':
          description: 서버 오류

  /coupons/types:
    get:
      tags:
        - Coupon
      summary: 발급 가능한 쿠폰 타입 목록 조회
      description: |
        현재 발급 가능한 쿠폰 타입 목록을 조회합니다.

        **기능 요구사항**: FR-CP-004
        **관련 문서**: docs/requirements/coupon.md

        **비즈니스 규칙**:
        - 유효 기간 내의 쿠폰만 조회
        - 수량이 남아있는 쿠폰만 조회
        - 이미 발급받은 쿠폰 타입은 제외 가능
      operationId: getCouponTypes
      parameters:
        - name: excludeOwned
          in: query
          description: 이미 발급받은 쿠폰 제외 여부
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponTypeListResponse'
        '500':
          description: 서버 오류

  # Cart APIs
  /cart:
    get:
      tags:
        - Cart
      summary: 장바구니 조회
      description: |
        사용자의 장바구니 목록을 조회합니다.

        **기능 요구사항**: FR-C-001
        **관련 문서**: docs/requirements/cart.md

        **비즈니스 규칙**:
        - 실시간 재고 확인
        - 재고 0 또는 판매 불가능한 옵션은 isAvailable=false
        - 삭제된 상품/옵션은 자동 제외
        - 실시간 가격 반영
      operationId: getCart
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

    delete:
      tags:
        - Cart
      summary: 장바구니 전체 비우기
      description: |
        장바구니의 모든 항목을 삭제합니다.

        **기능 요구사항**: FR-C-005
        **관련 문서**: docs/requirements/cart.md
      operationId: clearCart
      responses:
        '204':
          description: 삭제 성공
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

  /cart/items:
    post:
      tags:
        - Cart
      summary: 장바구니 항목 추가
      description: |
        상품 옵션을 장바구니에 추가합니다.

        **기능 요구사항**: FR-C-002
        **관련 문서**: docs/requirements/cart.md

        **비즈니스 규칙**:
        - 동일 옵션 존재 시 수량 증가
        - 재고 확인 필수
        - 수량: 1~99
        - 최대 20개 항목까지 담기 가능
        - 판매 불가능한 옵션은 추가 불가
      operationId: addCartItem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCartItemRequest'
            example:
              optionId: 101
              quantity: 2
      responses:
        '201':
          description: 추가 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                optionNotFound:
                  summary: 옵션을 찾을 수 없음
                  value:
                    code: "OPTION_NOT_FOUND"
                    message: "옵션을 찾을 수 없습니다"
                optionNotAvailable:
                  summary: 판매 불가능한 옵션
                  value:
                    code: "OPTION_NOT_AVAILABLE"
                    message: "판매 불가능한 옵션입니다"
                insufficientStock:
                  summary: 재고 부족
                  value:
                    code: "INSUFFICIENT_STOCK"
                    message: "재고가 부족합니다"
                    details:
                      availableStock: 5
                      requestedQuantity: 10
                invalidQuantity:
                  summary: 유효하지 않은 수량
                  value:
                    code: "INVALID_QUANTITY"
                    message: "수량은 1~99 사이여야 합니다"
                cartItemLimitExceeded:
                  summary: 장바구니 항목 수 초과
                  value:
                    code: "CART_ITEM_LIMIT_EXCEEDED"
                    message: "장바구니에는 최대 20개 항목까지 담을 수 있습니다"
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

  /cart/items/{itemId}:
    patch:
      tags:
        - Cart
      summary: 장바구니 수량 수정
      description: |
        장바구니 항목의 수량을 수정합니다.

        **기능 요구사항**: FR-C-003
        **관련 문서**: docs/requirements/cart.md

        **비즈니스 규칙**:
        - 수량: 1~99
        - 재고 확인
      operationId: updateCartItem
      parameters:
        - name: itemId
          in: path
          description: 장바구니 항목 ID
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartItemRequest'
            example:
              quantity: 3
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItemResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                insufficientStock:
                  summary: 재고 부족
                  value:
                    code: "INSUFFICIENT_STOCK"
                    message: "재고가 부족합니다"
                invalidQuantity:
                  summary: 유효하지 않은 수량
                  value:
                    code: "INVALID_QUANTITY"
                    message: "수량은 1~99 사이여야 합니다"
        '404':
          description: 장바구니 항목을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "CART_ITEM_NOT_FOUND"
                message: "장바구니 항목을 찾을 수 없습니다"
        '401':
          description: 인증 실패
        '403':
          description: 다른 사용자의 장바구니 항목
        '500':
          description: 서버 오류

    delete:
      tags:
        - Cart
      summary: 장바구니 항목 삭제
      description: |
        장바구니 항목을 삭제합니다.

        **기능 요구사항**: FR-C-004
        **관련 문서**: docs/requirements/cart.md
      operationId: deleteCartItem
      parameters:
        - name: itemId
          in: path
          description: 장바구니 항목 ID
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: 삭제 성공
        '404':
          description: 장바구니 항목을 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "CART_ITEM_NOT_FOUND"
                message: "장바구니 항목을 찾을 수 없습니다"
        '401':
          description: 인증 실패
        '403':
          description: 다른 사용자의 장바구니 항목
        '500':
          description: 서버 오류

  # User APIs
  /users/me:
    get:
      tags:
        - User
      summary: 내 정보 조회
      description: |
        현재 로그인한 사용자의 정보를 조회합니다.

        **관련 문서**: docs/requirements/user.md
      operationId: getMyInfo
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

    patch:
      tags:
        - User
      summary: 내 정보 수정
      description: |
        현재 로그인한 사용자의 정보를 수정합니다.

        **관련 문서**: docs/requirements/user.md
      operationId: updateMyInfo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            example:
              username: "홍길동"
              phoneNumber: "010-9876-5432"
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "INVALID_PHONE_NUMBER"
                message: "유효하지 않은 전화번호 형식입니다"
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

  /users/me/addresses:
    get:
      tags:
        - User
      summary: 배송지 목록 조회
      description: |
        사용자의 배송지 목록을 조회합니다.

        **관련 문서**: docs/requirements/user.md

        **비즈니스 규칙**:
        - 최대 10개까지 등록 가능
        - 기본 배송지는 1개만 가능
      operationId: getAddresses
      responses:
        '200':
          description: 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddressListResponse'
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

    post:
      tags:
        - User
      summary: 배송지 추가
      description: |
        새로운 배송지를 추가합니다.

        **관련 문서**: docs/requirements/user.md

        **비즈니스 규칙**:
        - 최대 10개까지 등록 가능
        - 기본 배송지로 설정 시 기존 기본 배송지는 해제됨
      operationId: addAddress
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAddressRequest'
            example:
              recipientName: "홍길동"
              phoneNumber: "010-1234-5678"
              postalCode: "12345"
              address: "서울특별시 강남구 테헤란로 123"
              detailAddress: "4층 401호"
              isDefault: true
      responses:
        '201':
          description: 추가 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
        '400':
          description: 잘못된 요청
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                addressLimitExceeded:
                  summary: 배송지 최대 개수 초과
                  value:
                    code: "ADDRESS_LIMIT_EXCEEDED"
                    message: "배송지는 최대 10개까지 등록할 수 있습니다"
                invalidPostalCode:
                  summary: 유효하지 않은 우편번호
                  value:
                    code: "INVALID_POSTAL_CODE"
                    message: "유효하지 않은 우편번호 형식입니다"
        '401':
          description: 인증 실패
        '500':
          description: 서버 오류

  /users/me/addresses/{addressId}:
    patch:
      tags:
        - User
      summary: 배송지 수정
      description: |
        배송지 정보를 수정합니다.

        **관련 문서**: docs/requirements/user.md

        **비즈니스 규칙**:
        - 기본 배송지로 설정 시 기존 기본 배송지는 해제됨
      operationId: updateAddress
      parameters:
        - name: addressId
          in: path
          description: 배송지 ID
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressRequest'
            example:
              recipientName: "홍길순"
              isDefault: true
      responses:
        '200':
          description: 수정 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAddress'
        '400':
          description: 잘못된 요청
        '404':
          description: 배송지를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "ADDRESS_NOT_FOUND"
                message: "배송지를 찾을 수 없습니다"
        '401':
          description: 인증 실패
        '403':
          description: 다른 사용자의 배송지
        '500':
          description: 서버 오류

    delete:
      tags:
        - User
      summary: 배송지 삭제
      description: |
        배송지를 삭제합니다.

        **관련 문서**: docs/requirements/user.md

        **비즈니스 규칙**:
        - 기본 배송지 삭제 시 다른 배송지가 자동으로 기본 배송지가 되지 않음
      operationId: deleteAddress
      parameters:
        - name: addressId
          in: path
          description: 배송지 ID
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: 삭제 성공
        '404':
          description: 배송지를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "ADDRESS_NOT_FOUND"
                message: "배송지를 찾을 수 없습니다"
        '401':
          description: 인증 실패
        '403':
          description: 다른 사용자의 배송지
        '500':
          description: 서버 오류

components:
  schemas:
    # Common schemas
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: 에러 코드
          example: "INSUFFICIENT_INVENTORY"
        message:
          type: string
          description: 에러 메시지
          example: "재고가 부족합니다"
        details:
          type: object
          description: 추가 상세 정보
          additionalProperties: true
          example:
            productId: 123
            requestedQuantity: 10
            availableQuantity: 5

    PaginationRequest:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          default: 1
          description: 페이지 번호
          example: 1
        size:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          description: 페이지 크기
          example: 20

    PaginationResponse:
      type: object
      required:
        - totalCount
        - currentPage
        - totalPages
      properties:
        totalCount:
          type: integer
          description: 전체 항목 수
          example: 150
        currentPage:
          type: integer
          description: 현재 페이지
          example: 1
        totalPages:
          type: integer
          description: 전체 페이지 수
          example: 8

    Category:
      type: object
      required:
        - categoryId
        - categoryName
      properties:
        categoryId:
          type: integer
          description: 카테고리 ID
          example: 1
        categoryName:
          type: string
          description: 카테고리명
          example: "상의"

    Address:
      type: object
      required:
        - recipientName
        - phoneNumber
        - postalCode
        - address
        - detailAddress
      properties:
        recipientName:
          type: string
          description: 수령인 이름
          maxLength: 50
          example: "홍길동"
        phoneNumber:
          type: string
          description: 전화번호
          pattern: '^\d{3}-\d{3,4}-\d{4}$'
          example: "010-1234-5678"
        postalCode:
          type: string
          description: 우편번호
          pattern: '^\d{5}$'
          example: "12345"
        address:
          type: string
          description: 주소
          maxLength: 200
          example: "서울특별시 강남구 테헤란로 123"
        detailAddress:
          type: string
          description: 상세주소
          maxLength: 200
          example: "4층 401호"

    # Product schemas
    ProductListResponse:
      type: object
      required:
        - products
      allOf:
        - type: object
          properties:
            products:
              type: array
              items:
                $ref: '#/components/schemas/ProductSummary'
        - $ref: '#/components/schemas/PaginationResponse'

    ProductSummary:
      type: object
      required:
        - productId
        - productName
        - thumbnailUrl
        - minPrice
        - maxPrice
        - viewCount
        - categories
      properties:
        productId:
          type: integer
          description: 상품 ID
          example: 10
        productName:
          type: string
          description: 상품명
          example: "기본 라운드 티셔츠"
        thumbnailUrl:
          type: string
          description: 썸네일 이미지 URL
          example: "https://example.com/images/product10.jpg"
        minPrice:
          type: integer
          description: 최저 가격 (옵션 중 최저가)
          example: 29000
        maxPrice:
          type: integer
          description: 최고 가격 (옵션 중 최고가)
          example: 35000
        viewCount:
          type: integer
          description: 조회수
          example: 1523
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'

    ProductDetailResponse:
      type: object
      required:
        - productId
        - productName
        - productDescription
        - thumbnailUrl
        - isActive
        - viewCount
        - categories
        - options
        - createdAt
      properties:
        productId:
          type: integer
          description: 상품 ID
          example: 10
        productName:
          type: string
          description: 상품명
          example: "기본 라운드 티셔츠"
        productDescription:
          type: string
          description: 상품 설명
          example: "편안한 착용감의 기본 라운드 티셔츠입니다"
        thumbnailUrl:
          type: string
          description: 썸네일 이미지 URL
          example: "https://example.com/images/product10.jpg"
        isActive:
          type: boolean
          description: 판매 활성화 여부
          example: true
        viewCount:
          type: integer
          description: 조회수
          example: 1523
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        options:
          type: array
          items:
            $ref: '#/components/schemas/ProductOption'
        createdAt:
          type: string
          format: date-time
          description: 등록일시
          example: "2025-01-01T00:00:00Z"

    ProductOption:
      type: object
      required:
        - optionId
        - optionName
        - optionDescription
        - price
        - stockQuantity
        - isAvailable
      properties:
        optionId:
          type: integer
          description: 옵션 ID
          example: 101
        optionName:
          type: string
          description: 옵션명
          example: "블랙 / L"
        optionDescription:
          type: string
          description: 옵션 설명
          example: "색상: 블랙, 사이즈: L"
        price:
          type: integer
          description: 가격
          example: 29000
        stockQuantity:
          type: integer
          description: 재고 수량
          example: 150
        isAvailable:
          type: boolean
          description: 판매 가능 여부
          example: true

    PopularProductsResponse:
      type: object
      required:
        - period
        - products
      properties:
        period:
          type: object
          description: 집계 기간
          required:
            - startDate
            - endDate
          properties:
            startDate:
              type: string
              format: date
              description: 시작일
              example: "2025-01-28"
            endDate:
              type: string
              format: date
              description: 종료일
              example: "2025-01-31"
        products:
          type: array
          maxItems: 5
          items:
            $ref: '#/components/schemas/PopularProduct'

    PopularProduct:
      type: object
      required:
        - rank
        - productId
        - productName
        - thumbnailUrl
        - salesCount
        - salesAmount
      properties:
        rank:
          type: integer
          description: 순위
          minimum: 1
          maximum: 5
          example: 1
        productId:
          type: integer
          description: 상품 ID
          example: 10
        productName:
          type: string
          description: 상품명
          example: "기본 라운드 티셔츠"
        thumbnailUrl:
          type: string
          description: 썸네일 이미지 URL
          example: "https://example.com/images/product10.jpg"
        salesCount:
          type: integer
          description: 판매 수량
          example: 523
        salesAmount:
          type: integer
          description: 판매 금액
          example: 15167000

    # Order schemas
    OrderStatus:
      type: string
      enum:
        - PENDING
        - PAID
        - COMPLETED
        - FAILED
        - CANCELLED
      description: |
        주문 상태
        - PENDING: 주문 생성 (결제 대기)
        - PAID: 결제 완료
        - COMPLETED: 주문 완료 (배송 완료)
        - FAILED: 결제 실패
        - CANCELLED: 주문 취소 (1차 개발 범위 제외)

    CreateOrderRequest:
      type: object
      required:
        - cartItemIds
        - shippingAddress
      properties:
        cartItemIds:
          type: array
          items:
            type: integer
          description: 주문할 장바구니 아이템 ID 목록
          minItems: 1
          example: [1, 2, 3]
        shippingAddress:
          $ref: '#/components/schemas/Address'
        couponId:
          type: integer
          description: 사용할 쿠폰 ID (선택)
          example: 5

    OrderResponse:
      type: object
      required:
        - orderId
        - orderNumber
        - userId
        - status
        - totalAmount
        - discountAmount
        - finalAmount
        - shippingAddress
        - items
        - createdAt
      properties:
        orderId:
          type: integer
          description: 주문 ID
          example: 1
        orderNumber:
          type: string
          description: 주문 번호
          example: "ORD-20250131-000001"
        userId:
          type: integer
          description: 사용자 ID
          example: 100
        status:
          $ref: '#/components/schemas/OrderStatus'
        totalAmount:
          type: integer
          description: 총 상품 금액
          example: 89000
        discountAmount:
          type: integer
          description: 할인 금액
          example: 5000
        finalAmount:
          type: integer
          description: 최종 결제 금액
          example: 84000
        shippingAddress:
          $ref: '#/components/schemas/Address'
        appliedCoupon:
          type: object
          description: 적용된 쿠폰 정보
          properties:
            couponId:
              type: integer
              example: 5
            couponName:
              type: string
              example: "신규 가입 쿠폰"
            discountAmount:
              type: integer
              example: 5000
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        createdAt:
          type: string
          format: date-time
          description: 주문 생성 일시
          example: "2025-01-31T10:30:00Z"
        paidAt:
          type: string
          format: date-time
          description: 결제 완료 일시
          example: "2025-01-31T10:30:05Z"

    OrderItem:
      type: object
      required:
        - orderItemId
        - productId
        - productName
        - optionId
        - optionName
        - price
        - quantity
        - subtotal
      properties:
        orderItemId:
          type: integer
          description: 주문 항목 ID
          example: 1
        productId:
          type: integer
          description: 상품 ID
          example: 10
        productName:
          type: string
          description: 상품명 (주문 시점 스냅샷)
          example: "기본 라운드 티셔츠"
        productThumbnailUrl:
          type: string
          description: 상품 썸네일 URL
          example: "https://example.com/images/product10.jpg"
        optionId:
          type: integer
          description: 옵션 ID
          example: 101
        optionName:
          type: string
          description: 옵션명 (주문 시점 스냅샷)
          example: "블랙 / L"
        price:
          type: integer
          description: 옵션 가격 (주문 시점 스냅샷)
          example: 29000
        quantity:
          type: integer
          description: 주문 수량
          example: 2
        subtotal:
          type: integer
          description: 소계 (price × quantity)
          example: 58000

    OrderListResponse:
      type: object
      required:
        - orders
      allOf:
        - type: object
          properties:
            orders:
              type: array
              items:
                $ref: '#/components/schemas/OrderSummary'
        - $ref: '#/components/schemas/PaginationResponse'

    OrderSummary:
      type: object
      required:
        - orderId
        - orderNumber
        - status
        - finalAmount
        - itemCount
        - createdAt
      properties:
        orderId:
          type: integer
          description: 주문 ID
          example: 1
        orderNumber:
          type: string
          description: 주문 번호
          example: "ORD-20250131-000001"
        status:
          $ref: '#/components/schemas/OrderStatus'
        finalAmount:
          type: integer
          description: 최종 결제 금액
          example: 84000
        itemCount:
          type: integer
          description: 주문 항목 수
          example: 3
        firstProductName:
          type: string
          description: 첫 번째 상품명
          example: "기본 라운드 티셔츠"
        firstProductThumbnailUrl:
          type: string
          description: 첫 번째 상품 썸네일
          example: "https://example.com/images/product10.jpg"
        createdAt:
          type: string
          format: date-time
          description: 주문 생성 일시
          example: "2025-01-31T10:30:00Z"

    # Payment schemas
    PointTransactionType:
      type: string
      enum:
        - CHARGE
        - USE
        - REFUND
      description: |
        포인트 트랜잭션 타입
        - CHARGE: 충전
        - USE: 사용 (결제)
        - REFUND: 환불 (1차 개발 범위 제외)

    ChargePointRequest:
      type: object
      required:
        - amount
      properties:
        amount:
          type: integer
          description: 충전 금액 (1,000원 ~ 1,000,000원, 1,000원 단위)
          minimum: 1000
          maximum: 1000000
          multipleOf: 1000
          example: 50000

    ChargePointResponse:
      type: object
      required:
        - transactionId
        - userId
        - amount
        - balanceAfter
        - chargedAt
      properties:
        transactionId:
          type: integer
          description: 트랜잭션 ID
          example: 1001
        userId:
          type: integer
          description: 사용자 ID
          example: 100
        amount:
          type: integer
          description: 충전 금액
          example: 50000
        balanceAfter:
          type: integer
          description: 충전 후 잔액
          example: 550000
        chargedAt:
          type: string
          format: date-time
          description: 충전 일시
          example: "2025-01-31T10:00:00Z"

    PointBalanceResponse:
      type: object
      required:
        - userId
        - balance
      properties:
        userId:
          type: integer
          description: 사용자 ID
          example: 100
        balance:
          type: integer
          description: 현재 잔액
          example: 550000
        maxBalance:
          type: integer
          description: 최대 보유 가능 잔액
          example: 10000000

    PointTransaction:
      type: object
      required:
        - transactionId
        - type
        - amount
        - balanceAfter
        - createdAt
      properties:
        transactionId:
          type: integer
          description: 트랜잭션 ID
          example: 1001
        type:
          $ref: '#/components/schemas/PointTransactionType'
        amount:
          type: integer
          description: 금액 (충전/사용/환불 금액)
          example: 50000
        balanceAfter:
          type: integer
          description: 거래 후 잔액
          example: 550000
        orderId:
          type: integer
          description: 주문 ID (USE, REFUND 타입인 경우)
          example: 123
        createdAt:
          type: string
          format: date-time
          description: 거래 일시
          example: "2025-01-31T10:00:00Z"

    PointTransactionListResponse:
      type: object
      required:
        - transactions
      allOf:
        - type: object
          properties:
            transactions:
              type: array
              items:
                $ref: '#/components/schemas/PointTransaction'
        - $ref: '#/components/schemas/PaginationResponse'

    # Cart schemas
    AddCartItemRequest:
      type: object
      required:
        - optionId
        - quantity
      properties:
        optionId:
          type: integer
          description: 상품 옵션 ID
          example: 101
        quantity:
          type: integer
          description: 수량 (1~99)
          minimum: 1
          maximum: 99
          example: 2

    UpdateCartItemRequest:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          description: 수량 (1~99)
          minimum: 1
          maximum: 99
          example: 3

    CartItem:
      type: object
      required:
        - cartItemId
        - productId
        - productName
        - thumbnailUrl
        - optionId
        - optionName
        - price
        - quantity
        - subtotal
        - stockQuantity
        - isAvailable
        - addedAt
      properties:
        cartItemId:
          type: integer
          description: 장바구니 항목 ID
          example: 1
        productId:
          type: integer
          description: 상품 ID
          example: 10
        productName:
          type: string
          description: 상품명
          example: "기본 라운드 티셔츠"
        thumbnailUrl:
          type: string
          description: 썸네일 이미지 URL
          example: "https://example.com/images/product10.jpg"
        optionId:
          type: integer
          description: 옵션 ID
          example: 101
        optionName:
          type: string
          description: 옵션명
          example: "블랙 / L"
        price:
          type: integer
          description: 옵션 가격 (현재 가격)
          example: 29000
        quantity:
          type: integer
          description: 수량
          example: 2
        subtotal:
          type: integer
          description: 소계 (price × quantity)
          example: 58000
        stockQuantity:
          type: integer
          description: 현재 재고 수량
          example: 150
        isAvailable:
          type: boolean
          description: 구매 가능 여부
          example: true
        addedAt:
          type: string
          format: date-time
          description: 장바구니 추가 일시
          example: "2025-01-31T09:00:00Z"

    CartResponse:
      type: object
      required:
        - userId
        - items
        - totalItems
        - totalAmount
      properties:
        userId:
          type: integer
          description: 사용자 ID
          example: 100
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totalItems:
          type: integer
          description: 총 항목 수
          example: 3
        totalAmount:
          type: integer
          description: 총 금액
          example: 145000

    CartItemResponse:
      type: object
      required:
        - cartItemId
        - productId
        - productName
        - optionId
        - optionName
        - price
        - quantity
        - addedAt
      properties:
        cartItemId:
          type: integer
          description: 장바구니 항목 ID
          example: 1
        productId:
          type: integer
          description: 상품 ID
          example: 10
        productName:
          type: string
          description: 상품명
          example: "기본 라운드 티셔츠"
        optionId:
          type: integer
          description: 옵션 ID
          example: 101
        optionName:
          type: string
          description: 옵션명
          example: "블랙 / L"
        price:
          type: integer
          description: 옵션 가격
          example: 29000
        quantity:
          type: integer
          description: 수량
          example: 2
        addedAt:
          type: string
          format: date-time
          description: 추가 일시
          example: "2025-01-31T09:00:00Z"

    # User schemas
    UserResponse:
      type: object
      required:
        - userId
        - username
        - email
        - createdAt
      properties:
        userId:
          type: integer
          description: 사용자 ID
          example: 100
        username:
          type: string
          description: 사용자명
          example: "홍길동"
        email:
          type: string
          format: email
          description: 이메일
          example: "hong@example.com"
        phoneNumber:
          type: string
          description: 전화번호
          example: "010-1234-5678"
        createdAt:
          type: string
          format: date-time
          description: 가입 일시
          example: "2025-01-01T00:00:00Z"

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: 사용자명
          maxLength: 50
          example: "홍길동"
        phoneNumber:
          type: string
          description: 전화번호
          pattern: '^\d{3}-\d{3,4}-\d{4}$'
          example: "010-1234-5678"

    UserAddress:
      type: object
      required:
        - addressId
        - recipientName
        - phoneNumber
        - postalCode
        - address
        - detailAddress
        - isDefault
      properties:
        addressId:
          type: integer
          description: 배송지 ID
          example: 1
        recipientName:
          type: string
          description: 수령인 이름
          maxLength: 50
          example: "홍길동"
        phoneNumber:
          type: string
          description: 전화번호
          pattern: '^\d{3}-\d{3,4}-\d{4}$'
          example: "010-1234-5678"
        postalCode:
          type: string
          description: 우편번호
          pattern: '^\d{5}$'
          example: "12345"
        address:
          type: string
          description: 주소
          maxLength: 200
          example: "서울특별시 강남구 테헤란로 123"
        detailAddress:
          type: string
          description: 상세주소
          maxLength: 200
          example: "4층 401호"
        isDefault:
          type: boolean
          description: 기본 배송지 여부
          example: true
        createdAt:
          type: string
          format: date-time
          description: 등록 일시
          example: "2025-01-15T10:00:00Z"

    AddAddressRequest:
      type: object
      required:
        - recipientName
        - phoneNumber
        - postalCode
        - address
        - detailAddress
      properties:
        recipientName:
          type: string
          description: 수령인 이름
          maxLength: 50
          example: "홍길동"
        phoneNumber:
          type: string
          description: 전화번호
          pattern: '^\d{3}-\d{3,4}-\d{4}$'
          example: "010-1234-5678"
        postalCode:
          type: string
          description: 우편번호
          pattern: '^\d{5}$'
          example: "12345"
        address:
          type: string
          description: 주소
          maxLength: 200
          example: "서울특별시 강남구 테헤란로 123"
        detailAddress:
          type: string
          description: 상세주소
          maxLength: 200
          example: "4층 401호"
        isDefault:
          type: boolean
          description: 기본 배송지 설정 여부
          default: false
          example: false

    UpdateAddressRequest:
      type: object
      properties:
        recipientName:
          type: string
          description: 수령인 이름
          maxLength: 50
          example: "홍길동"
        phoneNumber:
          type: string
          description: 전화번호
          pattern: '^\d{3}-\d{3,4}-\d{4}$'
          example: "010-1234-5678"
        postalCode:
          type: string
          description: 우편번호
          pattern: '^\d{5}$'
          example: "12345"
        address:
          type: string
          description: 주소
          maxLength: 200
          example: "서울특별시 강남구 테헤란로 123"
        detailAddress:
          type: string
          description: 상세주소
          maxLength: 200
          example: "4층 401호"
        isDefault:
          type: boolean
          description: 기본 배송지 설정 여부
          example: true

    UserAddressListResponse:
      type: object
      required:
        - addresses
      properties:
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/UserAddress'
        defaultAddress:
          $ref: '#/components/schemas/UserAddress'
          description: 기본 배송지

    # Coupon schemas
    CouponStatus:
      type: string
      enum:
        - AVAILABLE
        - USED
      description: |
        쿠폰 상태
        - AVAILABLE: 사용 가능
        - USED: 사용됨

    DiscountType:
      type: string
      enum:
        - FIXED
        - PERCENTAGE
      description: |
        할인 타입
        - FIXED: 고정 금액 할인
        - PERCENTAGE: 비율 할인

    IssueCouponRequest:
      type: object
      required:
        - couponTypeId
      properties:
        couponTypeId:
          type: integer
          description: 쿠폰 타입 ID
          example: 1

    IssueCouponResponse:
      type: object
      required:
        - couponId
        - couponName
        - discountType
        - discountValue
        - status
        - expiresAt
        - issuedAt
      properties:
        couponId:
          type: integer
          description: 발급된 사용자 쿠폰 ID
          example: 101
        couponName:
          type: string
          description: 쿠폰명
          example: "신규 가입 쿠폰"
        discountType:
          $ref: '#/components/schemas/DiscountType'
        discountValue:
          type: integer
          description: "할인 값 (FIXED: 금액, PERCENTAGE: 비율)"
          example: 5000
        status:
          $ref: '#/components/schemas/CouponStatus'
        expiresAt:
          type: string
          format: date-time
          description: 만료 일시
          example: "2025-02-28T23:59:59Z"
        issuedAt:
          type: string
          format: date-time
          description: 발급 일시
          example: "2025-01-31T10:00:00Z"

    UserCoupon:
      type: object
      required:
        - couponId
        - couponTypeId
        - couponName
        - discountType
        - discountValue
        - status
        - issuedAt
        - expiresAt
      properties:
        couponId:
          type: integer
          description: 사용자 쿠폰 ID
          example: 101
        couponTypeId:
          type: integer
          description: 쿠폰 타입 ID
          example: 1
        couponName:
          type: string
          description: 쿠폰명
          example: "신규 가입 쿠폰"
        discountType:
          $ref: '#/components/schemas/DiscountType'
        discountValue:
          type: integer
          description: 할인 값
          example: 5000
        status:
          $ref: '#/components/schemas/CouponStatus'
        issuedAt:
          type: string
          format: date-time
          description: 발급 일시
          example: "2025-01-31T10:00:00Z"
        expiresAt:
          type: string
          format: date-time
          description: 만료 일시
          example: "2025-02-28T23:59:59Z"
        usedAt:
          type: string
          format: date-time
          description: 사용 일시 (사용된 경우)
          example: "2025-02-01T14:30:00Z"
        orderId:
          type: integer
          description: 사용된 주문 ID (사용된 경우)
          example: 123

    UserCouponListResponse:
      type: object
      required:
        - coupons
      properties:
        coupons:
          type: array
          items:
            $ref: '#/components/schemas/UserCoupon'
        availableCount:
          type: integer
          description: 사용 가능한 쿠폰 수
          example: 2
        usedCount:
          type: integer
          description: 사용된 쿠폰 수
          example: 1

    CouponType:
      type: object
      required:
        - couponTypeId
        - couponName
        - discountType
        - discountValue
        - maxQuantity
        - issuedQuantity
        - validFrom
        - validUntil
      properties:
        couponTypeId:
          type: integer
          description: 쿠폰 타입 ID
          example: 1
        couponName:
          type: string
          description: 쿠폰명
          example: "신규 가입 쿠폰"
        couponDescription:
          type: string
          description: 쿠폰 설명
          example: "신규 가입 고객을 위한 5,000원 할인 쿠폰"
        discountType:
          $ref: '#/components/schemas/DiscountType'
        discountValue:
          type: integer
          description: 할인 값
          example: 5000
        maxQuantity:
          type: integer
          description: 최대 발급 수량
          example: 1000
        issuedQuantity:
          type: integer
          description: 현재 발급된 수량
          example: 523
        remainingQuantity:
          type: integer
          description: 남은 수량
          example: 477
        validFrom:
          type: string
          format: date-time
          description: 유효 기간 시작
          example: "2025-01-01T00:00:00Z"
        validUntil:
          type: string
          format: date-time
          description: 유효 기간 종료
          example: "2025-12-31T23:59:59Z"
        isAvailable:
          type: boolean
          description: 발급 가능 여부
          example: true

    CouponTypeListResponse:
      type: object
      required:
        - couponTypes
      properties:
        couponTypes:
          type: array
          items:
            $ref: '#/components/schemas/CouponType'
